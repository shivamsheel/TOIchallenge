<!DOCTYPE html>
<html>
  <head>
    <title><%= title %></title>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css">
    <link rel="stylesheet" href= "../public/css/upload.css"/>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.0/css/bootstrap.min.css">
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.0/jquery.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.0/js/bootstrap.min.js"></script>
  </head>
  <body>
        <div class="container">
                <div class="row">
                        <% if(success !=''){%>
                            <div class="alert alert-success">
                              <strong>Success!</strong> <%= success %>
                            </div>
                            <% } %>
                            <video controls class="mainbox col-md-6 col-md-offset-3 col-sm-8 col-sm-offset-2"></video>

                            <div class="form-group">
                                <div class="col-md-offset-3 col-md-9">
                              <p><button id="btnStart" class="btn btn-primary">START RECORDING</button><br/>
                                </div>
                                <div class="col-md-offset-3 col-md-9">
                              <button id="btnStop" class="btn btn-primary">STOP RECORDING</button></p> 
                                </div>
                           </div>
                               
                               <video id="vid2" style="margin-top:50px" class="mainbox col-md-6 col-md-offset-3 col-sm-8 col-sm-offset-2" controls></video>

                        
                               <script>
        
                                let constraintObj = { 
                                    audio: false, 
                                    video: { 
                                        facingMode: "user", 
                                        width: { min: 400, ideal: 1280, max: 400 },
                                        height: { min: 400, ideal: 720, max: 400 } 
                                    } 
                                }; 
                                // width: 1280, height: 720  -- preference only
                                // facingMode: {exact: "user"}
                                // facingMode: "environment"
                                
                                //handle older browsers that might implement getUserMedia in some way
                                if (navigator.mediaDevices === undefined) {
                                    navigator.mediaDevices = {};
                                    navigator.mediaDevices.getUserMedia = function(constraintObj) {
                                        let getUserMedia = navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
                                        if (!getUserMedia) {
                                            return Promise.reject(new Error('getUserMedia is not implemented in this browser'));
                                        }
                                        return new Promise(function(resolve, reject) {
                                            getUserMedia.call(navigator, constraintObj, resolve, reject);
                                        });
                                    }
                                }else{
                                    navigator.mediaDevices.enumerateDevices()
                                    .then(devices => {
                                        devices.forEach(device=>{
                                            console.log(device.kind.toUpperCase(), device.label);
                                            //, device.deviceId
                                        })
                                    })
                                    .catch(err=>{
                                        console.log(err.name, err.message);
                                    })
                                }
                        
                                navigator.mediaDevices.getUserMedia(constraintObj)
                                .then(function(mediaStreamObj) {
                                    //connect the media stream to the first video element
                                    let video = document.querySelector('video');
                                    if ("srcObject" in video) {
                                        video.srcObject = mediaStreamObj;
                                    } else {
                                        //old version
                                        video.src = window.URL.createObjectURL(mediaStreamObj);
                                    }
                                    
                                    video.onloadedmetadata = function(ev) {
                                        //show in the video element what is being captured by the webcam
                                        video.play();
                                    };
                                    
                                    //add listeners for saving video/audio
                                    let start = document.getElementById('btnStart');
                                    let stop = document.getElementById('btnStop');
                                    let vidSave = document.getElementById('vid2');
                                    let mediaRecorder = new MediaRecorder(mediaStreamObj);
                                    let chunks = [];
                                    
                                    start.addEventListener('click', (ev)=>{
                                        mediaRecorder.start();
                                        console.log(mediaRecorder.state);
                                    })
                                    stop.addEventListener('click', (ev)=>{
                                        mediaRecorder.stop();
                                        console.log(mediaRecorder.state);
                                    });
                                    mediaRecorder.ondataavailable = function(ev) {
                                        chunks.push(ev.data);
                                    }
                                    mediaRecorder.onstop = (ev)=>{
                                        let blob = new Blob(chunks, { 'type' : 'video/mp4;' });
                                        chunks = [];
                                        let videoURL = window.URL.createObjectURL(blob);
                                        vidSave.src = videoURL;
                                    }
                                })
                                .catch(function(err) { 
                                    console.log(err.name, err.message); 
                                });
                                
                                /*********************************
                                getUserMedia returns a Promise
                                resolve - returns a MediaStream Object
                                reject returns one of the following errors
                                AbortError - generic unknown cause
                                NotAllowedError (SecurityError) - user rejected permissions
                                NotFoundError - missing media track
                                NotReadableError - user permissions given but hardware/OS error
                                OverconstrainedError - constraint video settings preventing
                                TypeError - audio: false, video: false
                                *********************************/
                            </script>

                    <div id="uploadfile" style="margin-top:50px" class="mainbox col-md-6 col-md-offset-3 col-sm-8 col-sm-offset-2">
                        <div class="panel panel-info">
                            <div class="panel-heading">
                                <div class="panel-title">Upload File</div>
                                 </div>  
                            <div class="panel-body" >
                                <form action="/upload" id="EmployeeForm" class="form-horizontal" method="post"  role="form" enctype="multipart/form-data">
                                   
                                        
                                    <div class="form-group">
                                        <label for="file" class="col-md-3 control-label">Upload File</label>
                                        <div class="col-md-9">
                                            <input type="file" class="form-control" name="file" required>
                                        </div>
                                    </div>

                                    
                                    
            
                                    <div class="form-group">
                                        <!-- Button -->                                        
                                        <div class="col-md-offset-3 col-md-9">
                                        <input type="submit" name="submit" value="Upload" class="btn btn-primary">   
                                        </div>
                                    </div>

                                    
                                    
                                    
                                    
                                    
                                    
                                </form>

                                <form action="/done" id="EmployeeForm" class="form-horizontal" method="post"  role="form" enctype="multipart/form-data">
                                   
                                        
                                   

                                    
                                    
            
                                    <div class="form-group">
                                        <!-- Button -->                                        
                                        <div class="col-md-offset-3 col-md-9">
                                        <input type="submit" name="submit" value="Done" class="btn btn-primary">   
                                        </div>
                                    </div>

                                    
                                    
                                    
                                    
                                    
                                    
                                </form>
                             </div>
                        </div>
            
                   
                   
                    
             </div> 
                </div>
              </div>

              <div class="container">
                  <div class="row">
                     
                 <div class="col-md-4">
                  
                 </div>
                 
                    </div>
                </div>
                
              </body>
            </html>


            
